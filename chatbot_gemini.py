#!/usr/bin/env python
# coding: utf-8


import yfinance as yf
import requests
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from langchain.prompts import PromptTemplate
import re
import requests
import google.generativeai as genai
from langchain.chains import SequentialChain, LLMChain, RouterChain
from langchain_core.runnables import RunnableLambda, RunnableBranch, RunnablePassthrough
from langchain_core.prompts import ChatPromptTemplate

import os
from dotenv import load_dotenv

load_dotenv()

GNEWS_API_TOKEN = os.getenv("GNEWS_API_TOKEN")
GEMINI_API_TOKEN = os.getenv("GEMINI_API_TOKEN")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
X_API_KEY =  os.getenv("X_API_KEY")


nltk.download("stopwords")
nltk.download("punkt")


def preprocess_query(query):
    """–û—á–∏—â–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞."""
    stop_words = set(stopwords.words("russian"))
    query = query.lower()
    query = query.replace(";", " OR ")
    query = re.sub(r"[^–∞-—è–ê-–Øa-zA-Z0-9 ]", "", query)
    words = word_tokenize(query)
    return " ".join(words)

def get_gnews(query):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ GNews API –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    processed_query = preprocess_query(query)
    url = f"https://gnews.io/api/v4/search?q={processed_query}&lang=ru&country=ru&category=business&sortby=publishedAt&token={GNEWS_API_TOKEN}"
    
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return [{"title": item["title"], "url": item["url"]} for item in data.get("articles", [])[:3]]
    else:
        return ["–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"]

def summarize_news(news_articles, llm):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫, –ø–µ—Ä–µ—Å–∫–∞–∑ –∏ —Å—Å—ã–ª–∫—É."""
    summaries = []
    
    for article in news_articles:
        title = article["title"]
        url = article["url"]
        content = extract_article_text(url)
        
        if not content or "–û—à–∏–±–∫–∞" in content:
            summary = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏."
        else:
            try:
                prompt = f"""
                –ü—Ä–æ—á–∏—Ç–∞–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ (—É—Ä–µ–∑–∞–Ω –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤) –∏ —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.
                –ï—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ç—å–µ –Ω–µ—Ç, –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –µ–µ, –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–∫–∞–∑ –±—ã–ª —Ç–æ—á–Ω—ã–º –∏
                –Ω–µ –≤–≤–æ–¥–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–±–ª—É–∂–¥–µ–Ω–∏–µ –ª–æ–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π. –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏:
                "{content[:4000]}"
                """
                response = llm(prompt)
                summary = response
            except ValueError as e:
                summary = "–û—Ç–≤–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."

        summaries.append(f"üì∞ {title}\n\nüìå {summary}\n\nüîó {url}")
    
    return "\n\n".join(summaries)


from bs4 import BeautifulSoup

def extract_article_text(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ —Å –ø–æ–º–æ—â—å—é BeautifulSoup."""
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"
    }

    try:
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code != 200:
            return f"–û—à–∏–±–∫–∞: {response.status_code}"

        soup = BeautifulSoup(response.text, "html.parser")
        paragraphs = soup.find_all("p")
        text = "\n".join(p.get_text() for p in paragraphs)

        return text if text else "–û—à–∏–±–∫–∞: —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏: {str(e)}"

def get_news_summary(query, llm):
    news_articles = get_gnews(query)
    return summarize_news(news_articles, llm)

def get_stock_price(search_term):
    results = []
    query = requests.get(f'https://yfapi.net/v6/finance/autocomplete?region=IN&lang=en&query={search_term}', 
    headers={
        'accept': 'application/json',
        'X-API-KEY': X_API_KEY
    })
    response = query.json()
    for i in response['ResultSet']['Result']:
        final = i['symbol']
        results.append(final)

    if not results:
        return None
    stock = yf.Ticker(results[0])
    history = stock.history(period="1d")
    latest_data = history.iloc[-1]
    stock_info = {
        "symbol": results[0],
        "date": latest_data.name.strftime("%Y-%m-%d"),
        "open": latest_data["Open"],
        "high": latest_data["High"],
        "low": latest_data["Low"],
        "close": latest_data["Close"],
        "volume": latest_data["Volume"]
    }
    return stock_info

def get_stock_summary(query, llm):
    company_name = extract_company_name(query, llm)
    if not company_name:
        return "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    stock_info = get_stock_price(company_name)
    if stock_info is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ –∞–∫—Ü–∏–π —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏."
    
    stock_summary = f"""
    –î–∞–Ω–Ω—ã–µ –Ω–∞ {stock_info['date']}:
    –ê–∫—Ü–∏–∏ {stock_info['symbol']}:
    - –û—Ç–∫—Ä—ã—Ç–∏–µ: {stock_info['open']:.2f} USD
    - –ú–∞–∫—Å–∏–º—É–º: {stock_info['high']:.2f} USD
    - –ú–∏–Ω–∏–º—É–º: {stock_info['low']:.2f} USD
    - –ó–∞–∫—Ä—ã—Ç–∏–µ: {stock_info['close']:.2f} USD
    - –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: {stock_info['volume']}
    """

    response = llm(f"{stock_summary}\n\n–î–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ–±–∑–æ—Ä —Å–∏—Ç—É–∞—Ü–∏–∏ —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ —ç—Ç–∏—Ö –∞–∫—Ü–∏–π –≤ –¥–≤—É—Ö-—Ç—Ä–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö ")
    
    return stock_summary + "\n\n" + response

def extract_company_name(query, llm):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é Gemini."""
    prompt = f"""
    –í—ã–¥–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å, –∏ –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É, –µ—Å–ª–∏ –æ–Ω–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π, –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:
    "{query}"
    –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    response = llm(prompt)
    company_name = response.strip()

    return company_name

def extract_entity(query, llm):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é Gemini."""
    prompt = f"""
    –í—ã–¥–µ–ª–∏ —Å—É—â–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—É—â–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Å–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–ü—Ä–∏–º–µ—Ä: "–ö–∞–∫ –¥–µ–ª–∞ —Å –≤—ã–±–æ—Ä–∞–º–∏ –≤ –°–®–ê?" -> "–≤—ã–±–æ—Ä—ã –°–®–ê"):
    "{query}"
    –ù–∞–∑–æ–≤–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–∏ —Å—É—â–Ω–æ—Å—Ç–∏ –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∑–Ω–∞–∫–æ–≤. –ò—Å–ø—Ä–∞–≤—å –æ–ø–µ—á–∞—Ç–∫–∏ —Ç–∞–º, –≥–¥–µ —Å—á–∏—Ç–∞–µ—à—å –Ω—É–∂–Ω—ã–º. –ï—Å–ª–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π –±–æ–ª—å—à–µ —á–µ–º –æ–¥–Ω–∞, —Ä–∞–∑–¥–µ–ª–∏ –∏–∑ —Å –ø–æ–º–æ—â—å—é –∑–Ω–∞–∫–∞ ;
    """
    response = llm(prompt)
    entity = response.strip()

    return entity


genai.configure(api_key=GEMINI_API_TOKEN)

class CustomGeminiLLM:
    """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è Gemini, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å LangChain."""
    def __init__(self, model_name="gemini-pro", temperature=0.7):
        self.model = genai.GenerativeModel(model_name)
        self.temperature = temperature

    def __call__(self, query):
        """–í—ã–∑—ã–≤–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç."""
        if isinstance(query, str):
            prompt = query
        else:
            prompt = query.text 
        response = self.model.generate_content(prompt)
        return response.text.strip()


category_prompt_template = """
–¢–µ–±—è –∑–æ–≤—É—Ç –°–∞–π–≥–∞, —Ç—ã - —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å –ª—é–¥—å–º–∏ –∏ –ø–æ–º–æ–≥–∞–µ—à—å –∏–º –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞.
–û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è: –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –∞–∫—Ü–∏–π –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–º–ø–∞–Ω–∏–∏;
–∫–∞–∫–æ–≥–æ-—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –∏–ª–∏ —Å–æ–±—ã—Ç–∏—è, –æ –∫–æ—Ç–æ—Ä–æ–º –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ (–ü—Ä–∏–º–µ—Ä: –í—ã–±–æ—Ä—ã –≤ –°–®–ê, –ú–µ–∫—Å–∏–∫–∞–Ω—Å–∫–∏–π –∑–∞–ª–∏–≤); –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ. 
–û—Ç–≤–µ—Ç—å –æ–¥–Ω–æ—Å–ª–æ–∂–Ω–æ: '–∫–æ–º–ø–∞–Ω–∏—è', '–æ–±—â–µ–µ' –∏–ª–∏ '–¥—Ä—É–≥–æ–µ'.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ, —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ.
–ó–∞–ø—Ä–æ—Å: {input}
"""

basic_template = """
–¢–µ–±—è –∑–æ–≤—É—Ç –°–∞–π–≥–∞, —Ç—ã - —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢—ã —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—à—å —Å –ª—é–¥—å–º–∏ –∏ –ø–æ–º–æ–≥–∞–µ—à—å –∏–º –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞.
–°—Ç–∞—Ä–∞–π—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –∫—Ä–∞—Ç–∫–æ, –æ—Ç –æ–¥–Ω–æ–≥–æ –¥–æ —Ç—Ä–µ—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
–ó–∞–ø—Ä–æ—Å: {query}
"""

company_prompt = PromptTemplate.from_template("–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Å–∏—Ç—É–∞—Ü–∏—é —Å –∫–æ—Ç–∏—Ä–æ–≤–∫–∞–º–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö: {stock_info}.")

category_prompt = PromptTemplate(input_variables=["input"], template=category_prompt_template)

basic_prompt = PromptTemplate(input_variables=["query"], template=basic_template)

model = CustomGeminiLLM()

router_chain = (
    {"query": RunnablePassthrough()}
    | {
        "query": lambda x: x, 
        "category": category_prompt | model
    }
    | RunnableBranch(
        (RunnableLambda(lambda x: x["category"] == "–∫–æ–º–ø–∞–Ω–∏—è"), RunnableLambda(lambda x: process_company_query(x["query"]))),
        (RunnableLambda(lambda x: x["category"] == "–æ–±—â–µ–µ"), RunnableLambda(lambda x: process_general_news(x["query"]))),
        RunnableLambda(lambda x: basic_prompt | model)
    )
)

def process_company_query(query):
    company_name = extract_company_name(query, model)
    if not company_name:
        return "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
    return get_stock_summary(company_name, model) + '\n\n' + get_news_summary(company_name, model)

def process_general_news(query):
    entity = extract_entity(query, model)
    return get_news_summary(entity, model)
                

async def start(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∑–∞–ø—Ä–æ—Å –æ —Ä—ã–Ω–∫–µ –∏–ª–∏ –∞–∫—Ü–∏—è—Ö.")

async def handle_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_query = update.message.text
    response = router_chain.invoke(user_query)
    await update.message.reply_text(response)

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    response = router_chain.invoke(message.text)
    bot.send_message(message.chat.id, response)

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
bot.polling()




